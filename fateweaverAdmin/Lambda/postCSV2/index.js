'use strict'

//TODO : add school_id to students 
//TODO : add school_id to tutor_groups
//TODO : Added_id


let getFile = function (fileMime, buffer) {
    let hash = sha1(new Buffer(new Date().toString()));
    let now = moment().format('YYY - MM - DD HH: mm: ss');

    let fileName = hash + '.' + ".csv"; //let fileName = hash + '.' + fileExt;
    let fileFullName = fileName;
    let fileFullPath = 'bucket name' + fileFullName;

    let params = {
        Bucket: 'fateweaver-files',
        Key: fileFullName,
        Body: buffer
    };

    let uploadFile = {
        size: buffer.toString('ascii').length,
        type: "text/csv",
        name: fileName,
        full_path: fileFullPath
    };

    return {
        'params': params,
        'uploadFile': uploadFile,
        'fileFullName': fileFullName
    };

}

const AWS = require('aws-sdk');
const moment = require('moment');
const fileType = require('file-type');
const sha1 = require('sha1');
var mysql = require('mysql');
var connection = mysql.createConnection({
    "host": process.env.host,
    "user": process.env.user,
    "password": process.env.password,
    "port": process.env.port
});

exports.handler = (event, context, callback) => {

    var fields = ["Given Name", "Family Name", "DOB", "Gender", "Postcode", "UPN", "ULN", "Tutor Group", "PP", "SEN"];
    var school_id;
    let base64String = event.form.base64String;
    let buffer = new Buffer(base64String, 'base64');
    let fileMime = fileType(buffer);
    let file = getFile(fileMime, buffer);
    let params = file.params;
    var Added = [];
    var notAdded = [];
    var TutorGroupsAdded = [];
    let fileRawText = buffer.toString('ascii');
    var progressId;

    connection.query("insert into fateweaver.upload_progress set ?", [{qty : fileRawText.split("\r\n").length - 1}], function (error, results, fields) {
        progressId = results.insertId;
        begin();
    });


    //#0
    function begin(){
        connection.query("select * from fateweaver.admins where cognito_id = ?", [event.account.sub], function (err, results, fields) {
            if (err) {
                console.log("Error getting tutor groups:", err);
            }
            school_id = results[0].school_id;
        });    
       
    
        if (fileRawText == null) {
            callback(null, {
                statusCode: 200,
                status: false,
                errMsg: "Couldn't Detect CSV file"
            });
        } else {
            var JsonData = csvTojs(fileRawText.replace("\r", "") + "*")
    
            if (JsonData.length <= 1) {
                callback(null, {
                    statusCode: 200,
                    status: false,
                    errMsg: "Couldn't find any data in the CSV file"
                });
            } else {
                //return data
                processFields(fields, JsonData);
            }
        }
    }    

    //#1 - for each column heading
    async function processFields(array, JsonData) {
        for (const item of array) {
            await delayedFields(item, JsonData);
        }
        processJsonData(JsonData);
    }

    //#2 - check heading is correct
    async function delayedFields(field, JsonData) {
        if (JsonData[0][field] != null) {
            console.log(field);
        } else {
            callback(null, {
                statusCode: 200,
                status: false,
                errMsg: "couldn't find the field named " + field,
            });
        }
        await delay();
    }

    //#3 - process each student
    async function processJsonData(array) {
        for (const item of array) {
            await delayedJsonData(item);
        }

        context.succeed({
            Done: Added,
            NotDone: notAdded,
            TutorGroupsAdded: TutorGroupsAdded
        });
    }

    //#4 - if tutor group doesn't exist - create one
    async function delayedJsonData(item) {
        connection.query("select * from fateweaver.tutor_groups where name = ? and school_id = ?", [item["Tutor Group"], school_id], function (err, results, fields) {
            if (err) {
                console.log("Error getting tutor groups:", err);
            }

            if (results.length == 0) {
                var dataGroup = {
                    name: item["Tutor Group"],
                    description: "Auto Generated By Upload",
                    added: new Date(Date.now()),
                    added_id: event.account.sub,
                    csv: file.fileFullName,
                    school_id: school_id
                }
                connection.query("insert into fateweaver.tutor_groups set ? ", dataGroup, function (error, results, fields) {

                    //console.log("Student added - There Wasn't a tutor Group");
                    console.log(results.insertId);
                    //now create a student using this group id
                    TutorGroupsAdded.push(item["Tutor Group"]);
                    createStudent(results.insertId, item, file);

                });
            } else {
                //console.log("Student added - There Was a tutor Group");
                console.log(results[0].id);
                createStudent(results[0].id, item, file);
                //now create a student using this group id

            }
        });

        await delay();

    }

    //#5 - insert student
    async function createStudent(Group_id, StudentInfo, file) {
        var dset = {
            given_name: StudentInfo["Given Name"],
            family_name: StudentInfo["Family Name"],
            dob: StudentInfo.DOB,
            postcode: StudentInfo.Postcode,
            upn: StudentInfo.UPN,
            uln: StudentInfo.ULN,
            tutor_group_id: Group_id,
            gender: StudentInfo.Gender,
            pp: StudentInfo.PP,
            sen: StudentInfo.SEN,
            school_id: school_id,
            added: new Date(Date.now()),
            added_id: event.account.sub,
            csv: file.fileFullName
        }

        connection.query("select * from fateweaver.students where given_name = ? and postcode = ? and upn = ? and school_id = ?  ", [StudentInfo["Given Name"], StudentInfo.Postcode, StudentInfo.UPN, school_id], function (error, results, fields) {
            if (results.length > 0) {
                //append to Not added
                var jsonStudent = {
                    given_name: StudentInfo["Given Name"],
                    family_name: StudentInfo["Family Name"],
                    dob: StudentInfo.DOB,
                    postcode: StudentInfo.Postcode,
                    upn: StudentInfo.UPN,
                    uln: StudentInfo.ULN,
                    tutor_group_id: Group_id,
                    Duplicate: results[0].id,
                    TutorGroupId: Group_id,
                    gender: StudentInfo.Gender,
                    pp: StudentInfo.PP,
                    sen: StudentInfo.SEN,
                }
                notAdded.push({ jsonStudent });
                connection.query("update fateweaver.upload_progress set not_done=? where id = ?", [JSON.stringify(notAdded), progressId], function (error, results, fields) {
                    console.log(error);
                  });
            } else {
                connection.query("insert into fateweaver.students set ?", [dset], function (error, results, fields) {
                    var jsonStudent = {
                        given_name: StudentInfo["Given Name"],
                        family_name: StudentInfo["Family Name"],
                        dob: StudentInfo.DOB,
                        postcode: StudentInfo.Postcode,
                        upn: StudentInfo.UPN,
                        uln: StudentInfo.ULN,
                        tutor_group_id: Group_id,
                        gender: StudentInfo.Gender,
                        pp: StudentInfo.PP,
                        sen: StudentInfo.SEN,
                    }
                    Added.push({ jsonStudent });
                    connection.query("update fateweaver.upload_progress set done=? where id = ?", [Added.length, progressId], function (error, results, fields) {
                      console.log(error);
                    });
                });
            }
        });
    }

    function delay() {
        return new Promise(resolve => setTimeout(resolve, 300));
    }

    function occurrences(string, subString, allowOverlapping) {
return new Promise(resolve => {
    string += "";
        subString += "";
        if (subString.length <= 0) return (string.length + 1);
    
        var n = 0,
            pos = 0,
            step = allowOverlapping ? 1 : subString.length;
    
        while (true) {
            pos = string.indexOf(subString, pos);
            if (pos >= 0) {
                ++n;
                pos += step;
            } else break;
        }
        resolve(n)
});
        
    }

}

function csvTojs(csv) {
    var lines = csv.split("\n");
    var result = [];
    var headers = lines[0].split(",");

    for (var i = 1; i < lines.length; i++) {
        var obj = {};

        var row = lines[i],
            queryIdx = 0,
            startValueIdx = 0,
            idx = 0;

        if (row.trim() === '') { continue; }

        while (idx < row.length) {
            /* if we meet a double quote we skip until the next one */
            var c = row[idx];

            if (c === '"') {
                do { c = row[++idx]; } while (c !== '"' && idx < row.length - 1);
            }

            if (c === ',' || /* handle end of line with no comma */ idx === row.length - 1) {
                /* we've got a value */
                var value = row.substr(startValueIdx, idx - startValueIdx).trim();

                /* skip first double quote */
                if (value[0] === '"') { value = value.substr(1); }
                /* skip last comma */
                if (value[value.length - 1] === ',') { value = value.substr(0, value.length - 1); }
                /* skip last double quote */
                if (value[value.length - 1] === '"') { value = value.substr(0, value.length - 1); }

                var key = headers[queryIdx++];
                obj[key] = value;
                startValueIdx = idx + 1;
            }

            ++idx;
        }

        result.push(obj);
    }
    return result;
}
